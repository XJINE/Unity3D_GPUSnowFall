#pragma kernel SnowFall

RWStructuredBuffer<float3> _VertexBuffer;
StructuredBuffer<float>    _ScaleBuffer;
float3 _MinRange;
float3 _MaxRange;
float  _MinScale;
float  _MaxScale;
float3 _ScaleInfluence;
float3 _MovePower;
float  _Time;
float  _FluctuationSpeed;
float  _FluctuationScale;

[numthreads(4, 1, 1)]
void SnowFall(uint3 id : SV_DispatchThreadID)
{
    float3 position  = _VertexBuffer[id.x];
    float  scale     = _ScaleBuffer[id.x];
    float  influence1 = _Time * (id.x % 10) * _FluctuationSpeed;
    float  influence2 = _Time * (id.x % 11) * _FluctuationSpeed;
    
    position   += _MovePower + (scale / (_MaxScale - _MinScale) * _ScaleInfluence);
    position.x += cos(influence1) * _FluctuationScale;
    position.z += cos(influence2) * _FluctuationScale;

    if (position.x < _MinRange.x)
    {
        position.x = _MaxRange.x - (_MinRange.x - position.x);
    }

    if (position.y < _MinRange.y)
    {
        position.y = _MaxRange.y - (_MinRange.y - position.y);
    }

    if (position.z < _MinRange.z)
    {
        position.z = _MaxRange.z - (_MinRange.z - position.z);
    }

    if (position.x > _MaxRange.x)
    {
        position.x = _MinRange.x + (position.x - _MaxRange.x);
    }

    if (position.y > _MaxRange.y)
    {
        position.y = _MinRange.y + (position.y - _MaxRange.y);
    }

    if (position.z > _MaxRange.z)
    {
        position.z = _MinRange.z + (position.z - _MaxRange.z);
    }

    _VertexBuffer[id.x] = position;
}